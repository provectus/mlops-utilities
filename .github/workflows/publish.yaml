name: Publish

on:
  workflow_dispatch:
    inputs:
        name:
          type: choice
          description: Select version format 
          options: 
            - minor
            - patch
            - major

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo & prepearing
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - uses: snok/install-poetry@v1
        with:
          version: 1.2.2
      - run: poetry install

      - name: Test with pytest
        run: |
          make test

      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v3
        if: always() # always run even if the previous step fails
        with:
          report_paths: 'report.xml'

  publish:
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - name: Checkout repo & prepearing
        uses: actions/checkout@v3

      - uses: snok/install-poetry@v1
        with:
          version: 1.2.2
      - run: poetry install

      - name: Version up
        run: |
          make "${{ github.event.inputs.name }}_version_up"

      - name: Add env
        run: |
          PROJECT_VERSION=$(poetry version --short)
          echo "PROJECT_VERSION=$PROJECT_VERSION" >> $GITHUB_ENV

      - name: Build
        run: |
          make build

      - name: Create a GitHub release
        uses: ncipollo/release-action@v1.12.0
        id: create_release
        with:
          generateReleaseNotes: true
          artifacts: "mlops_utilities-${{env.PROJECT_VERSION}}.tar.gz"
          tag: ${{env.PROJECT_VERSION}}
          name: Release ${{env.PROJECT_VERSION}}

      - name: Publish
        run: |
          poetry config pypi-token.pypi "${{ secrets.PYPI_PASSWORD }}"
          make publish
      
      - name: Git push
        run: |
          git remote set-url origin https://${{ secrets.GITHUB_TOKEN }}@github.com/provectus/mlops-utilities.git
          git config --global user.name "github-actions"
          git add pyproject.toml
          git commit -m '[skip ci] Version updated to ${{env.PROJECT_VERSION}}'
          git push -u origin HEAD:${{ github.ref  }}
      